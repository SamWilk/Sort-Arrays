"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./Algorithms/sortingAlgorithms.ts":
/*!*****************************************!*\
  !*** ./Algorithms/sortingAlgorithms.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"mergeSort\": function() { return /* binding */ mergeSort; },\n/* harmony export */   \"bubblesort\": function() { return /* binding */ bubblesort; },\n/* harmony export */   \"insertionSort\": function() { return /* binding */ insertionSort; },\n/* harmony export */   \"heapSort\": function() { return /* binding */ heapSort; },\n/* harmony export */   \"shellSort\": function() { return /* binding */ shellSort; }\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\nfunction mergeSort(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    var mid = Math.floor(arr.length / 2);\n    return merge(mergeSort(arr.slice(0, mid)), mergeSort(arr.slice(mid)));\n}\nfunction merge(left, right) {\n    var mergeArr = [];\n    var animations = [];\n    var i = 0, j = 0;\n    while(i < left.length && j < right.length){\n        if (left[i] < right[j]) {\n            mergeArr.push(left[i++]);\n            animations.push([\n                i,\n                j\n            ]);\n        } else {\n            mergeArr.push(right[j++]);\n            animations.push([\n                j,\n                i\n            ]);\n        }\n    }\n    return mergeArr.concat(left.slice(i)).concat(right.slice(j));\n}\nfunction bubblesort(arr) {\n    var animations = [];\n    arr = arr.slice(); // creates a copy of the array\n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr.length - 1; j++){\n            if (arr[j] > arr[j + 1]) {\n                var swap = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = swap;\n                animations.push([\n                    j,\n                    j + 1\n                ]);\n            //console.log(\"Swaping: \" + j + \" | \" + j + 1);\n            }\n        }\n    }\n    // console.log(arr);\n    return animations;\n}\nfunction insertionSort(arr, n) {\n    var animations = [];\n    var i, key, j;\n    for(i = 1; i < n; i++){\n        key = arr[i];\n        j = i - 1;\n        while(j >= 0 && arr[j] > key){\n            arr[j + 1] = arr[j];\n            animations.push([\n                j + 1,\n                j\n            ]);\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n    return animations;\n}\n//Heap Sort\nfunction heapSort(arr) {\n    var ani = [];\n    var n = arr.length;\n    // Build heap (rearrange array)\n    for(var i = Math.floor(n / 2) - 1; i >= 0; i--)heapify(arr, n, i, ani);\n    // One by one extract an element from heap\n    for(var i = n - 1; i > 0; i--){\n        // Move current root to end\n        var temp = arr[0];\n        arr[0] = arr[i];\n        arr[i] = temp;\n        // call max heapify on the reduced heap\n        ani = heapify(arr, i, 0, ani);\n    }\n    console.log(arr);\n    return ani;\n}\n// To heapify a subtree rooted with node i which is\n// an index in arr[]. n is size of heap\nfunction heapify(arr, n, i, ani) {\n    var largest = i; // Initialize largest as root\n    var l = 2 * i + 1; // left = 2*i + 1\n    var r = 2 * i + 2; // right = 2*i + 2\n    // If left child is larger than root\n    if (l < n && arr[l] > arr[largest]) {\n        ani.push([\n            largest,\n            l\n        ]);\n        largest = l;\n    }\n    // If right child is larger than largest so far\n    if (r < n && arr[r] > arr[largest]) {\n        largest = r;\n    }\n    // If largest is not root\n    if (largest != i) {\n        var swap = arr[i];\n        arr[i] = arr[largest];\n        arr[largest] = swap;\n        // Recursively heapify the affected sub-tree\n        heapify(arr, n, largest, ani);\n    }\n    return ani;\n}\nfunction shellSort(arr) {\n    var n = arr.length;\n    var ani = [];\n    // Start with a big gap, then reduce the gap\n    for(var gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)){\n        // Do a gapped insertion sort for this gap size.\n        // The first gap elements a[0..gap-1] are already\n        // in gapped order keep adding one more element\n        // until the entire array is gap sorted\n        for(var i = gap; i < n; i += 1){\n            // add a[i] to the elements that have been gap\n            // sorted save a[i] in temp and make a hole at\n            // position i\n            var temp = arr[i];\n            // shift earlier gap-sorted elements up until\n            // the correct location for a[i] is found\n            var j = void 0;\n            for(j = i; j >= gap && arr[j - gap] > temp; j -= gap){\n                arr[j] = arr[j - gap];\n                ani.push([\n                    j,\n                    j - gap\n                ]);\n            }\n            // put temp (the original a[i]) in its correct\n            // location\n            arr[j] = temp;\n        }\n    }\n    return ani;\n}\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Algorithms/sortingAlgorithms.ts\n");

/***/ })

});